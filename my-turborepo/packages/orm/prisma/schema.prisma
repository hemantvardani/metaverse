// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  uuid  String @default(uuid()) @unique
  firstName String
  lastName String
  password String @default("")
  userName String @unique
  role Role @default(PLAYER)
  spaces Space[]
  avatarId String?
  avatar Avatar? @relation(fields: [avatarId],references: [uuid])
}

model Map {
  uuid String @default(uuid()) @unique
  title String 
  description String
  img String
  height Int @default(100)
  width Int @default(100)
  spaces Space[]
  defaultElementsMapping ElementMapping[]
   
}

// model ElementMapMapping {
//   uuid String @default(uuid()) @unique
//   mapId String
//   map Map @relation(fields: [mapId], references: [uuid])
//   x String
//   y String
//   title String
//   elementId String
//   element Element @relation(fields: [elementId], references: [uuid])

// }

model Space {
  uuid String @default(uuid()) @unique
  title String
  mapId String
  map Map @relation(fields: [mapId], references: [uuid])
  userId String
  user User @relation(fields: [userId], references: [uuid])
  // spaceElementMap ElementSpaceMapping[]
  elementsMapping ElementMapping[]
}

model Element {
  uuid String @default(uuid()) @unique
  title String
  width Int
  height Int
  overridable Boolean @default(false) // whether can be overlapped
  img String
  // elementSpaceMap ElementSpaceMapping[]
  // elementMapMap ElementMapMapping[]
  elementMapping ElementMapping[]
}

// model ElementSpaceMapping {
//   uuid String @default(uuid()) @unique
//   elementId String
//   element Element @relation(fields: [elementId], references: [uuid])
//   x String
//   y String
//   spaceId String
//   space Space @relation(fields: [spaceId], references: [uuid])
// }

model ElementMapping {
  uuid String @default(uuid()) @unique
  x String
  y String
  elementId String
  element Element @relation(fields: [elementId],references: [uuid])
  layoutMapId String
  layoutSpaceId String
  layout Layout
  layoutMapRef Space @relation(fields: [layoutMapId], references: [uuid])
  layoutSpaceRef Map @relation(fields: [layoutSpaceId], references: [uuid])


}

model Avatar {
  uuid String @default(uuid()) @unique
  title String
  img String
  user User[]
}
  
enum Role {
  PLAYER
  ADMIN
}

enum Layout {
  SPACE
  MAP
}

// remaining Task here
// then web socket thing re-watch
